openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: https://localhost:8443
  description: Generated server url
paths:
  /api/users/{id}/update:
    put:
      tags:
      - user-rest-controller
      summary: Update an user
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: address
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Direction'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: Update an user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: No user updated
  /api/users/{id}/update/address:
    put:
      tags:
      - user-rest-controller
      summary: Update an user address
      operationId: updateUserAddresse
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Direction'
        required: true
      responses:
        "200":
          description: Update an user address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: No user address updated
  /api/users/{id}/image:
    get:
      tags:
      - user-rest-controller
      summary: Get an user image
      operationId: getUserImageById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: No user image founded
        "200":
          description: Get an user image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    post:
      tags:
      - user-rest-controller
      summary: Post an user image
      operationId: addUserImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              required:
              - avatar
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        "404":
          description: No user image posted
        "200":
          description: Post an user image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users/new:
    post:
      tags:
      - user-rest-controller
      summary: Post a new user
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "404":
          description: No user posted
        "200":
          description: Post a new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/auth/logout:
    post:
      tags:
      - login-controller
      operationId: logout
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/login:
    post:
      tags:
      - login-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/add/cart/users/{name}/items/{id}:
    post:
      tags:
      - item-rest-controller
      summary: Add an item to an user shoppingcart
      operationId: addToCart
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemToBuy'
        required: true
      responses:
        "404":
          description: No item posted
        "200":
          description: Posted item to a shopping cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
  /users/session:
    get:
      tags:
      - user-rest-controller
      operationId: getCurrentUser
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /shoppingcart/user:
    get:
      tags:
      - shopping-cart-rest-controller
      operationId: getShoppingCart
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ShoppingCart'
  /shoppingcart/user/items:
    get:
      tags:
      - shopping-cart-rest-controller
      operationId: getItemsToBuy
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemToBuy'
  /orders/{id}:
    get:
      tags:
      - order-rest-controller
      operationId: getOrderByIdReddis
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order'
  /items/{id}:
    get:
      tags:
      - item-rest-controller
      operationId: getParticularItemReddis
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Item'
  /items/favourites/user:
    get:
      tags:
      - item-rest-controller
      operationId: getFavItems
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageItem'
  /api/users:
    get:
      tags:
      - user-rest-controller
      summary: Get user listing
      operationId: getUsers
      responses:
        "200":
          description: Get user listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: No user founded
  /api/users/{id}:
    get:
      tags:
      - user-rest-controller
      summary: Get an user
      operationId: getUserByUsername
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: No user founded
        "200":
          description: Get an user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users/current:
    get:
      tags:
      - user-rest-controller
      summary: Get current user
      operationId: getCurrentUser_1
      responses:
        "404":
          description: No user founded
        "200":
          description: Get current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/shoppingcart/{username}:
    get:
      tags:
      - shopping-cart-rest-controller
      summary: Get an user shopping cart
      operationId: getShoppingCart_1
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Get an user shopping cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCart'
        "404":
          description: No shopping cart founded
  /api/shoppingcart/{username}/items:
    get:
      tags:
      - shopping-cart-rest-controller
      summary: Get a shopping cart items listing
      operationId: getItemsToBuy_1
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Get a shopping cart items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCart'
        "404":
          description: No item founded
  /api/orders:
    get:
      tags:
      - order-rest-controller
      summary: Get all orders paged
      operationId: getOrders
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: Get orders paged
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "404":
          description: No order generated
  /api/orders/{id}/items:
    get:
      tags:
      - order-rest-controller
      summary: Get items of an order
      operationId: getItemsByOrder
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Get items listing of an order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "404":
          description: No item of any order founded
  /api/orders/{ident}:
    get:
      tags:
      - order-rest-controller
      summary: Get an order by id
      operationId: getOrderById
      parameters:
      - name: ident
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Get an order by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "404":
          description: No order founded
  /api/orders/users/{username}:
    get:
      tags:
      - order-rest-controller
      summary: Buy - Generate and order
      operationId: buy
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Generate an order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "404":
          description: No order generated
  /api/items:
    get:
      tags:
      - item-rest-controller
      summary: Get all items paged
      operationId: getItems
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: No item founded
        "200":
          description: Get items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
  /api/items/{name}:
    get:
      tags:
      - item-rest-controller
      summary: Get item by name
      operationId: getItemsByName
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: Get item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        "404":
          description: No item founded
  /api/items/{id}/info:
    get:
      tags:
      - item-rest-controller
      summary: Get an item by id
      operationId: getParticularItem
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Get item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        "404":
          description: No item founded
  /api/items/{id}/image:
    get:
      tags:
      - item-rest-controller
      summary: Get an item image
      operationId: downloadImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Get item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        "404":
          description: No item founded
  /api/items/listing:
    get:
      tags:
      - item-rest-controller
      summary: Get all items listed
      operationId: getItemsListing
      responses:
        "404":
          description: No item founded
        "200":
          description: Get items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
  /api/items/favourites/{username}:
    get:
      tags:
      - item-rest-controller
      summary: Get an user favourites items
      operationId: getFavouritesItems
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: No item founded
        "200":
          description: Get user favourites items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
  /api/shoppingcart/{id}/remove:
    delete:
      tags:
      - shopping-cart-rest-controller
      summary: Delete an item from a shopping cart
      operationId: deleteItemToBuyById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: No item removed
        "200":
          description: Delete an item from a shopping cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCart'
components:
  schemas:
    Direction:
      type: object
      properties:
        id:
          type: integer
          format: int32
        street:
          type: string
        number:
          type: integer
          format: int32
        zipCode:
          type: integer
          format: int32
        city:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int32
        code:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        gender:
          type: string
        type:
          type: string
        imageFile:
          type: object
          properties:
            binaryStream:
              type: object
        stocks:
          type: array
          items:
            $ref: '#/components/schemas/StockObject'
        stock:
          $ref: '#/components/schemas/StockObject'
    ItemToBuy:
      type: object
      properties:
        id:
          type: integer
          format: int32
        code:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        size:
          type: string
        count:
          type: integer
          format: int32
    LocalTime:
      type: object
      properties:
        hour:
          type: integer
          format: int32
        minute:
          type: integer
          format: int32
        second:
          type: integer
          format: int32
        nano:
          type: integer
          format: int32
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int32
        code:
          type: string
        totalCost:
          type: number
          format: double
        creationDate:
          type: string
        state:
          type: string
          enum:
          - PENDING
          - CONFIRMED
          - DELIVERED
          - CANCELLED
        itemToBuys:
          type: array
          items:
            $ref: '#/components/schemas/ItemToBuy'
    ShoppingCart:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        totalCost:
          type: number
          format: double
        buyTime:
          $ref: '#/components/schemas/LocalTime'
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemToBuy'
    Size:
      type: object
      properties:
        id:
          type: integer
          format: int32
        code:
          type: string
        label:
          type: string
    StockObject:
      type: object
      properties:
        id:
          type: integer
          format: int32
        code:
          type: string
        stock:
          type: integer
          format: int32
        size:
          $ref: '#/components/schemas/Size'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        username:
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string
        rol:
          type: string
        passwordConfirmation:
          type: string
        direction:
          $ref: '#/components/schemas/Direction'
        shoppingCart:
          $ref: '#/components/schemas/ShoppingCart'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        tokenType:
          type: string
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    PageItem:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/PageableObject'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        unpaged:
          type: boolean
        paged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
